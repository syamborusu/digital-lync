15th July
=========

    -> Full Stack Courses

    -> Cloud / DevOps

    -> Data Analytics / DS / ML / AI / DE etc

    -> CORE PYTHON (30 Days)

        -> Full Stack Courses --> SQL, Django etc

        -> Cloud / DevOps     --> Boto3 (Python Framework)

        -> Data Analytics / DS / ML / AI / DE etc (Numpy, Pandas, etc )
    
    -> What is Python ?

        -> Object Oriented Programming Language (Interpreted)

        -> High Level Language

        -> Scripting Language

        -> etc

    -> Language ?

        -> Communication (Words, Writing, Speech, Gestures etc)  

            -> Regions(South India - North India - East Of India) (Culture)

                -> Hindi, Telugu etc
            
    -> Programming Language ?

        -> Machines cannot understand Languages like English, Hindi etc

        -> Machines know only Binary Language (011101111)

        -> User will Communicate with a computer using Programming Language

    ->  A programming paradigm is a relatively high-level way to conceptualize 
        and structure the implementation of a computer program. 
            -> Imperative, Declarative, Object-Oriented, Functional etc
    
    -> NOTE: Python is a multi paradigm Programming Language 

    -> Imperative - How To do a task  (Python, Java, C etc)  

    -> Declarative - What To do (SQL, CSS, Python etc)  

    -> Functional - Everything is functions(Haskell, Lisp, Python etc)

        -> Lambda Expressions, Higher Order Functions etc
    
    -> Object Oriented - Taking real world objects and represent them in programs

    -> Scripting -  A scripting language is a programming language 
        designed to automate tasks (DevOps & Cloud)


    -> 01010000 01111001 01110100 01101000 01101111 01101110 (Low Level)

    
    -> Indentation

        -> { } [ ] ( ) ; Other programming languages

        -> Space 
    
    -> Java Program to add two numbers

        class AddNumbers {
            public static void main(String [] args) {
                public int num1 = 10;
                public int num2 = 20;
                int sum = a+b;
            }
        }
    
    -> Python Program to add two numbers
        
        num1 = 10
        num2 = 20
        sum = a+b
    
    -> Java (Static Typed -- You need to tell before hand what datatype to apply )  
        
        String brandName = "The Indian Garage Co";
        double ratings = 4.2;
        int size = 34;

    -> Python (Dynamic Typed -- You don't need to tell before hand what datatype to apply )
        
        brand_name = "The Indian Garage Co"
        ratings = 4.2
        size = 34

        print(f"Brand is {brand_name}")
        print(f"Ratings are {ratings}")
        
        NOTE: Applied On Object Level
    
    -> Java vs Python

        -> Java is Fast (Compiled Language) 

        -> Python is Slow (Interpreted Language) (Line By Line) 

        -> Java Learning Curve is HIGH (Proto Type - 6 Months)

        -> Python Learning Curve is EASY (Proto Type - 6 Weeks)

17th July
=========

    -> Setup Python Environment

        -> Setup Python Interpreter (Run Python Code)    

        -> IDE (Integrated Development Environment) - VS CODE

        -> Git Bash (Version Controlling) (Tracking Source Code) (Client Software)

        -> Setup GitHub Account (Store Code) (Service Provider)

19th July
=========

    -> Two Modes To Execute Python Code

        -> Script Mode (In real time)

            -> IDE 

        -> Interactive / Command Line Mode

            -> Python Interpreter   

    -> Keywords

        -> predefined reserved word that have special
        meaning to python Interpreter

        -> There are 35 keywords in python

        -> https://docs.python.org/3/reference/lexical_analysis.html#keywords

    -> Variables 

        -> To Store Data  

        -> All the Variables will be stored in memory  

    -> DataTypes

        -> To Store Different types of data we have Different
        DataTypes   
    
    -> Any sort of Variables we create, we have rules

    -> Identifier rules

        -> Can Contain
            -> Letters(A-Z or a-z)
            -> Digits(0-9)
            -> UnderScore(_)
        -> Must Start with
            -> A letter 
            -> UnderScore
        -> Cannot start with digit
        -> Cannot be Python Keyword(imp0rt, class)  
        -> Identifiers are case sensitive(Name, name, NAME)

    -> We can use type() to know what datatype 
    we are working with

    -> We can use id() to know what is the memory address
    of Variables/Data (object)

    -> Output Variables

        -> print()

22nd July
=========

    -> Concatenation - Joining the Strings using + operator

    -> Interpolation - Replacing placeholders with Actual Values

        -> Supports from Python 3 onwards
        -> We use { } with f-strings(string formatted literals)
    
    -> Variables 

        -> To Store Data
        -> To Retrieve Data 
        -> To Manipulate Data (Operators)

    -> Operators

        -> Special Symbols, that perform operations on 
            Variables & Values

        -> Values : Operands
        -> Symbols : Operators

        -> Python has multiple types of Operators

            -> Arithmetic Operators

                -> + - * / % 
                -> // - floor division 
                    (same as division but round off answer to integer)
                -> ** - exponentiation (for power calculations)

            -> Compound Assignment Operators
                -> Assignment Operator is =
                -> Used for concise(short) form of writing Arithmetic operations
                -> x = x + 5 or  x += 5

                -> += -= *= /= %= //= **=

                -> Like in java we have increment / decrement
                    ++ --, this is not supported in python

                -> In python we can use
                    += 1 or -= 1

            -> Comparison / Relational Operators

                -> Used to compare values and determine if 
                    the return value is True / False (boolean)

                -> Primarily used with conditionals  

                -> == (Equal To)   
                -> != (Not Equal To)   
                -> >
                -> <
                -> <=
                -> >=

            -> Logical Operators

                -> Used to combine multiple conditions
                -> Return value is True / False (boolean)

                -> and 
                -> or
                -> not 

                X       Y       X and Y    X or Y    not X    not Y
                T       T           T         T         F       F
                T       F           F         T         F       T
                F       T           F         T         T       F
                F       F           F         F         T       T      


            -> Membership Operators

                -> Used if a sequence is present 

                -> in - returns true if specified input is in given sequence

                -> not in - returns true if specified input is not in given sequence

            -> Identity Operators

                -> Used to compare objects on memory level
                    we use == to compare values

                -> is - returns true if both the objects are same

                -> is not - returns true if both the objects are not same


            -> Bitwise Operators

                -> Used to perform Comparison on BINARY LEVEL(01)

                -> Used in Embedded Systems, Network Programming, OS Level etc

                -> AND(&) - Sets each bit to 1 if both bits are 1
                -> OR (|)- Sets each bit to 1 if one of bits is 1
                -> XOR (^) - Sets each bit to 1 if only one of the bits is 1
                    i.e if both values are different then output is 1, 
                        if both values are same then output is 0 
                -> NOT(~ is tilde) - Invert the bits 
                
                -> << (Left Shift)
                    -> Shift the bits to left, pushing zeros in from
                        the right and let the leftmost bits fall off
                -> >> (Right Shift)
                    -> Shift the bits to right, pushing the left most bits 
                        in from the left, so that rightmost bits fall off


24th July
=========

    -> Control Statements

        -> Using Control Statements, we can control the flow
        of program execution

        -> We have following categories 

            -> Conditional Statements (Decision Making Statements)
            -> Looping Statements (Iteration Statements)
            -> Branching Statements (Jump Statements)

        -> Conditional Statements

            -> Conditional Statements will output a boolean value
            based on the condition determined

            -> Indentation Rules

                -> Use either spaces or tabs, but not both
                    (python recommended is 4 spaces)

                -> Make sure all the lines in same block, have same
                Indentation level

            -> input() -> predefined function in python, which can 
            Interact with the users, by taking inputs 

            -> Type Conversion 

                -> Convert from one datatype to another datatype

                -> Converting Smaller datatype to larger datatype
                    considered SAFE OPERATION, (WIDENING)

                -> It's AUTOMATICALLY handled by python    

            -> Type Casting

                -> Convert from one datatype to another datatype

                -> Converting larger datatype to smaller datatype
                    considered SAFE OPERATION, (NARROWING)

                -> It's needs to handled by developer using casting methods
                int() -> float() etc

                -> Ternary Operator / Conditional Operator

                    -> Allows yo to write concise form of if-else
                        value_if_true if condition else value_if_false 

            -> Types Of Conditional Statements

                -> if Statement
                    -> Executes a code block, if condition is True
                -> if-else Statement
                    -> Executes one code block, if condition is True and
                      Execute another code block, if condition is False  
                -> elif ladder Statement
                    -> Allows Multiple conditions to be checked
                -> match-case (3.1+)
                    -> Allows Multiple conditions to be checked 
                
                -> We can Use Nested Conditions as well, 
                    inside a condition we can write more conditions

26th July
=========

    -> Loops - Execute a block of code repeatedly, based on
        a condition

        -> When you want to repeat a task you rely on loops

        -> Types Of Loops 

            -> while loop - runs a block of code, as long as 
                the condition is True

            -> for loop - used to Iterate over a sequence
                (strings, lists, tuples etc) 

                -> you can use for loop when you know number
                    of Iterations before hand
            
            -> Nested Loops - Loop inside another loop

    -> Branching Statements (Jump Statements)         

        -> break - stop the execution of loop / terminate  the loop

        -> continue - used to skip the current Iteration

        -> pass - does nothing, used as a placeholder for future code

29th July
=========

    -> Variables, DataTypes, Operators, Conditionals, Loops, Branching Statements

    -> variable = 10
    -> multiple_values = 10 20 30 incorrect     

    -> Collections - Sequence Of Data which will hold multiple
    elements in a single Variable

    -> Basic Collection type is String

    -> Advanced Collection types

        -> Lists
        -> Tuples
        -> Dictionaries
        -> Sets

    -> Strings

        -> A sequence of characters enclosed in
            '' or "" or """

            """ -> not recommended for single line strings
    
    -> Python uses indexing for accessing individual characters

        -> We have Positive indexing (Left To Right)
        -> We have Negative indexing (Right To Left)

            0  1  2  3  4  5 (positive)
            p  y  t  h  o  n 
           -6 -5 -4 -3 -2 -1 (negative)
        
        -> Accessing index outside defined range causes
            IndexError: string index out of range
        
    -> Slicing - To access a range of characters inside
        the string

        (range) -> start, stop, step

        Slicing -> start, stop, step

    -> String Immutability

        -> Data once defined, cannot be changed

2nd Aug
=========

-> Collections

-> Variable - Storing one value at a time 

    -> num = 10

-> Collection - Storing more than one value at a time 

    -> nums = 10,20,30,40,50

        -> nums is an object of tuples class    

-> Python provides following classes to handle multiple values at a time

    -> Lists
    -> Tuples
    -> Dictionaries
    -> Sets

-> Data Structure - It's way to organize and store data, so that you can
    efficiently access and modify the data

-> Lists

    -> In python, Lists are built in data structure that allows tp store multiple 
    values in a single variable using [] (square brackets)

    -> we can also create lists using class list

    -> LIST is one of the widely used data structure

    -> list_nums = [10,20,30,40,50]
    -> list_nums = list([10,20,30,40,50])

-> Accessing Data in Lists

    -> Each element inside list has index just like 
    strings and index starts from zero (0)

    -> Both Positive and Negative Indexes 

    -> We can use same Indexing and Slicing, from strings

    -> if we access index out of range, Index IndexError

    -> List Supports 11 methods for performing operations
        with list data

5th Aug
=========

-> List Methods

    -> continue

-> Key Characteristics of Lists

    -> Ordered - Items are stored in order, and order is preserved

    -> Mutable - You can change data (append(), remove())

    -> Duplicates - Allowed 

-> Tuples

    -> In python, Tuples are built in data structure that allows tp store multiple 
    values in a single variable using () (parentheses)

    -> Tuples are IMMUTABLE, data cannot be changed

    -> Tuples are READ ONLY DATA (Static means doesn't change) 

    -> we can also create tuples using class tuple

    -> Each element has a position, called index starts from 0, same as lists

    -> Positive & Negative Indexing supported same as lists

    -> Slicing is same as lists

    -> Looping is same as Lists

    -> Tuples operations

        -> Tuples are IMMUTABLE, meaning no modifications, only Accessing

        -> Tuples support only two operations i.e two methods

-> Key Characteristics of Tuples

    -> Ordered - Items are stored in order, and order is preserved

    -> IMMUTABLE - You cannot change data

    -> Duplicates - Allowed         

    -> NOTE - Use Tuples when you want Data Safety i.e fixed data

7th Aug
=========

-> Dictionaries

-> In python, Dictionaries are built in data structure that allows to store multiple 
    set of key & values in a single variable using { } (curly braces)

-> Key Value Pairs (item)

-> No INDEXING and No SLICING -> No concept of index in dict

-> As we use key & values

    -> Keys can be IMMUTABLES (tuples, strings, numbers)
    -> Values can be any object

    -> if we give keys as mutable, we get TypeError: unhashable type:

    -> We cannot use list as key in dict
    -> we cannot use list as a set elements

    -> 90% of the time keys will be Strings

-> Dictionaries operations

-> Key Characteristics of Dictionaries

    -> Ordered - Items are stored in order, and order is preserved

    -> MUTABLE - You can change data (update,pop etc)

    -> Duplicates - Allowed for values, 
        but for keys NOT allowed, if we give duplicate Key
        it will not give error, rather it updates

    -> NOTE: Keys can only be Immutables, whereas values can be
        any object 

    -> NOTE - Use top store data based on key values

-> Sets

-> In python, Sets are built in data structure that allows to store multiple 
    values in a single variable using { } (curly braces)

-> In sets we don't have keys like Dictionaries, only values

    -> dict = {1:10,2:20}
    -> set = {1,10,2,20} -> {10,20,1,2}

-> Set are UUU 

    -> U - Unique (No Duplicates, Duplicates will be removed)
    -> U - Unorderd (Insertion Order Not Preserved)
    -> U - Unindexed (No Index, So NO INDEXING & NO SLICING)

    -> SETS - used to perform Set related mathematical operations

    -> Union
    -> Intersection
    -> Difference 
    -> Symmetric Difference


9th Aug
=========

-> Set operations

-> Sets have 17 methods 

-> FrozenSet

    -> Regular Set is Mutable (Can be Changed)
    -> FrozenSet is Immutable (Cannot be Changed)

    -> FrozenSets only support set specific operations


-> Key Characteristics of Sets

    -> UnOrdered - Items are not stored in order, and order is not preserved

    -> MUTABLE - You can change data

    -> Duplicates - Not Allowed         

    -> NOTE - When you need Uniqueness in data go for sets

    NOTE- IMMUTABLE version of set is FROZENSET use frozenset class


-> Database operations

    -> CRUD - Create / Read / Update / Delete 

        -> In future w.r.t Databases you can perform them using Web Applications

        -> Now we are going to use Console Based Programs to achieve same

    -> LMS (Student - Trainer - Course - etc)   

        -> We want all our data structures to be implemented using LMS Applications

            -> Lists - Scores
            -> Tuples - ?
            -> Dictionaries - student 
            -> Sets - Skills

        -> Student (ID,Name,Scores,Skills)

12th Aug
=========

    -> Student Management System Using Data Structures
    
            -> Implementing CRUD like operations using Console Based

16th Aug
=========

-> Functional Based Programming

    -> Functions - function is a block of code which performs some tasks or Applications

    -> Functions can help break down complex problems into simpler and smaller 
        manageable tasks
    
    -> You can call a function, multiple times, which avoids code repetition
        and helps you get code reusability

    -> functions syntax

        def function_name():
            Statements    

    -> Functions With Parameters

        -> This approach allows your functions to take
            Dynamic inputs 
        
    -> Based on arguments passed, we have different types of functions

        -> Positional Arguments 
        -> Default Arguments  
        -> Keyword Arguments    
        -> Arbitrary Positional Arguments (*args)
        -> Arbitrary Keyword Arguments (**kwargs)

    -> Positional Arguments - The passed arguments to the function, should have 
        exact order defined in function signature

        -> Here positions will change functionality, if incorrectly used

    -> Default Arguments  - Passing default values as the arguments to the functions

        -> Default values will be overridden by values passed at the function call

        -> Once start adding a default arguments, the next preceding values should be 
            default only not other types

            # SyntaxError: non-default argument follows default argument
        
        -> Keyword Arguments - Arguments are passed by explicitly specifying the
            name, so function call is based on name of the argument

            -> order doesn't matter anymore, as keys are passed based on names

            -> Improves code readability, and avoids confusion, when we have multiple 
                Parameters 

            -> Next all the  preceding values should be of same type not other types  

        ->  Arbitrary Positional Arguments (*args)  

            Arbitrary means random / unknown

            -> These functions will accept any number of Positional based arguments

            -> All values will be Collected into a tuple

        -> Arbitrary Keyword Arguments (**kwargs)     

            -> These functions will accept any number of Keyword based arguments

            -> All values will be Collected into a Dictionary

17th Aug
=========

-> Return keywords is used in functions to give 
    appropriate response when function is called

-> Generally return should be the last Statement, inside
    the function execution

-> If we are using multiple return Statements sequentially
    the first return will be executed, not the others

-> You can have multiple return Statements, but the Logic
    should be appropriate


-> Scope Of Variables Within Functions

    -> Scope - where in the code, a variable can be used 
        or not

    -> Local Scope

        -> A Local variable declared inside a function
        -> It only exists while the function runs
        -> You cannot use them outside the function

    -> Global Scope  

        -> A Global variable is declared outside the function
        -> It can be used anywhere in code, inside or outside
            functions
        -> As globals variables can be accessed within Functions
            and there can be a name conflict, in that case
            Local variables get first preference inside functions
        -> You cannot change global variables(read only by default)      
        -> If you want them to change inside function, then we need
            to use a special keyword called global

    -> Function Composition

        -> Function calling another function for reusability

-> Types Of Functions

    -> Built In Functions

        -> Functions which are already pre built into python

        -> No need to define them, they are ready to use

            -> print() -> display output
            -> id() -> display object address
            -> input() -> take user input
            -> len() -> number of elements
            -> max() -> give largest element
            -> etc

    -> User Defined Functions

        -> Functions that your create by yourself, based on 
            requirements using def keyword

        -> Whatever we did so far are user defined functions    

    -> Lambda Functions (Anonymous Functions)

        -> Lambda functions are One line functions

        -> NOTE - Used only for Single line Expressions

        -> We use lambda keyword, and result of the Expression
            is automatically returned 
        
        -> Mainly used for tasks, when passing a function 
            as an argument

        -> syntax

            lambda arguments: expression    

            NOTE: arguments cab ne multiple, but only one line expression

        -> IILE - Immediately Invoked Lambda Functions         


19th Aug
=========

-> Core Idea Of Functional Programming

    -> Just like lambda functions, functions that take another function as an argument

    -> We use higher order functions

        -> map
        -> filter
        -> reduce

    -> We want to write concise code, without using lengthy code like custom loops


    -> map - Used to applying a function on each item in the iterable 

        -> earlier we used some for loop and performed operations

        -> syntax 

            map(function, iterable)

        -> Think of map() as - Do this for every item in the iterable

    
    -> filter - Used to applying a function on each item in the iterable with a condition

        -> earlier we used some for loop with condition and performed operations

        -> syntax 

            filter(function, iterable)
        
         -> Think of filter() as - Keep Only items, where the condition is met

    -> reduce -  used to reduce an iterable to single value, applying the function
        cumulatively 

            -> syntax 

            reduce(function, iterable)

        -> reduce is a part of module (functools), so we need to import before using it 


    -> TASK - Rewrite the LMS DS App with below implementation

        -> if choice == "1":
            add_student()

        -> if choice == "2":
            update_student()
        
        -> Implement a new option to work a search criteria, where search students 
            should displayed based if has that skill

            print("4 - List All Students")
            print("5 - Search")    
            print("6 - Exit System")  

            -> NOTE - Use lambda based approach 

-> Modules

    -> A module is a python file, that contains

        -> variables
        -> Statements
        -> functions
        -> classes 
        -> etc
    
    -> This approach allows reusability, across multiple programs
        by importing the module, rather than rewriting again

    -> Mainly for

        -> Reusability

        -> Better Code organize

    -> Types Of Modules

        -> Built In Modules

            -> Comes with python installation

        -> User Defined Modules

            -> Created By Users, based on their requirements

        -> External Modules 

            -> Developed By Communities, Third party vendors

            -> We need a tool called pip for working with
                External modules (pip - python package manager)

21st Aug
=========

-> Modules Continued

-> External Modules are available in pypi.org

-> Packages 

    -> For Reusability ( on folder level)   

    -> Module - A single file, used file name 
    -> Package - A folder with multiple modules - multiple .py files
        use folder name

    -> To create a package will create a file called 

        __init__.py ( empty / start up configs )



-> File & Directory Management

    -> File operations

        -> Create
        -> Read 
        -> Update
        -> Delete

    -> Earlier all the programs data is non-persistent (RAM)

        -> non-persistent data - Temporary

    -> Now i need the programs to save data (persistent data)

        -> persistent data - Long Term Storage

23rd Aug
=========

-> File Management with csv data

    -> Python does provide csv module out of the box, we can perform operations on csv files

    
-> File Management with json data

    -> Python does provide json module out of the box, we can perform operations on json files

    -> Data exchange formats 

        -> XML 
        -> JSON
        -> YAML  

    -> JSON looks like a Dictionary in python

        -> json.dump() - write json to file
        -> json.load() - Read json from file

        -> json.dumps() - covert python dict to string
        -> json.loads() - covert string to python dict

25th Aug
=========

-> Exception Handling

    -> Exception : It's an ERROR, which occurs during Program Execution

    -> When Python encounters an ERROR, its abruptly STOPS the Program.

    -> To change above behavior, and handle the Exceptions by ourself we need following

        -> try : used to keep the code that causes errors
        -> except : used to keep the code that should run, when error occurs
        -> else : Run if no Exceptions is raised in the try block
        -> finally : Runs this code no matter what, if there is an Exception or Not, 
            we want to run some piece of code always -> closing connections

    -> We can define our own Exceptions, from already given base class (Exception)

    -> In OOPS, we have Inheritance --> Inherits features from Base Class

        -> Syntax : 
            class UserDefinedException(Exception):
                pass


-> Object Oriented Approach (OOPS)

    -> Object Oriented Programming, we are structuring the code using data and behavior
        using objects 

    -> We we use OOPS ways of programming we get following benefits

        -> Inheritance : Code Reusability
        -> Polymorphism : Different behavior for single method or object
        -> Encapsulation : Security for data 
        -> Abstraction : Hiding the implementation (contract based programming)

    -> To start with OOPS

        -> classes
        -> objects
        -> Methods

            -> Inheritance -> Polymorphism -> Encapsulation -> Abstraction

    -> Class : Class is blueprint for Object

        -> Laptop (Laptop has a keyboard, screen, weight )

    -> Object : Instance(Real Entity) Of a class 

        Object : Has characteristics and behavior

        -> Mac Laptop (object) created from Laptop(class)

            -> mac characteristics 
                - screen: 13 inch
                - weight: 600 gms
            
            -> mac behaviors
                - can play video in 4k
                - can play audio up to 30 watts 

        -> Dell Laptop (object) created from Laptop(class)

            -> dell characteristics 
                - screen: 15.6 inch
                - weight: 2.5 kgs
            
            -> dell behaviors
                - can play video in 1080p
                - can play audio up to 10 watts 


    -> Object : Has characteristics and behavior

        -> characteristics = variables / attributes
        -> behaviors = methods(looks and works like functions) 

    -> Class (Definition) -> Objects -> Data(Variables) -> Methods(To Act On Data)

    -> Syntax

        class ClassName:
            pass
        
        object = ClassName()

        class Laptop:
            pass

            def method(): # inside class
                pass

        mac = Laptop()
        dell = Laptop()

        def function(): # outside class
            pass    


28th Aug
=========

-> NOTE : When we shift from functional style to OOPS style, this is one of the Common
    confusion point

-> NOTE : The default behavior in python

    -> Python will automatically passes the object as first Parameter to method

    -> That is called commonly referred to as self 

    -> self refers to current object (student_obj)
    -> python automatically passes, this object when you call a method on an object
    -> NOTE : First Parameter for your method should be self 

    -> this keyword in other programming languages is self in python

    -> __init__ it's a special method in python (constructor)

    -> It will automatically run, when a new object is created

    -> We use to to initialize the objects data

-> Instance Variables 

    -> Instance Variables  Belong To Object 

    -> Instance Variables are defined inside __init__ methods using self keyword

    -> Each Object has it's own copy Instance Variable

    -> Accessing Instance Variables is done using self.variable


-> Instance Methods

    -> Instance Methods operates on instance variables

    -> Most common type of methods in OOPS style

    -> Instance Method's first Parameter will always be self

    -> Can access both instance and class variables

    -> Calling is done using object --> object.method()

-> Instance Variables + Instance Methods

-> Class Variables

    -> Class variables are shared data i.e same data for all objects 

    -> Defined inside the call outside the method

    -> Accessing ClassName.variable 

    -> NOTE : We can use object to access Class variables, but not recommended

    -> If we update class variable, all the objects using this variable will get updated

    -> For memory efficiency 

-> Class Methods

    -> Methods defined inside class, that will operate on class variables

    -> Not so commonly used

    -> Class methods are bound to class, not objects

    -> NOTE : For class methods generally we use (cls as first parameter)

    -> NOTE : @classmethod decorator is used

-> Class Variables + Class Methods